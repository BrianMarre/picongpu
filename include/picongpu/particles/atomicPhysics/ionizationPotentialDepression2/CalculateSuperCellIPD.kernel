/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

//! @file implements generic kernel for filling the superCell ionization potential depression(IPD) superCell field

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"

#include <pmacc/lockstep/lockstep.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::ionizationPotentialDepression2
{
    namespace detail
    {
    } // namespace detail

    template<
        typename T_IPDModel,
        typename ionParticleBoxIndexList,
        typename electronParticleBoxList,
        typename... T_ParticleBoxTypes>
    struct CalculateSuperCellIPDKernel
    {
        /** called by CalculateSuperCellIPD atomicPhysics sub-stage
         *
         * @param ipdBox deviceDataBox giving access to the device local per superCell ionization potential depression
         *  values
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_IonizationPotentialDepressionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_IonizationPotentialDepressionDataBox ipdBox,
            T_ParticleBoxes... particleBoxes) const
        {
            // end kernel if superCell already finished
            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            if(timeRemaining <= 0._X)
                return;

            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = atomicPhysics::KernelIndexation::superCellFieldIndex(worker, areaMapping);
            float_X& ipd = ipdBox(superCellFieldIdx);

            using IonSpeciesList = pmacc::particles::meta::FindByNameOrType_t<VectorAllSpecies, T_IonSpecies>;

            using AccumulationStruct = IPDModel::AccumulationStruct;
            PMACC_SMEM(worker, accumulationStruct, AccumulationStruct);

            // call IPD Model calculateInput with particle boxes

            using InputStruct = IPDModel::SuperCellInputStruct;
            InputStruct const input = IPDModel::calculateIPDInput;

            /// @todo use forEachSuperCell instead of letting workers wait, Brian Marre, 2024
            auto onlyMaster = lockstep::makeMaster(worker);
            onlyMaster([&ipd, &input]() { ipd = IPDModel::calculateSuperCellIPD(input); });
        }
    };
} // namespace picongpu::particles::atomicPhysics::ionizationPotentialDepression2
