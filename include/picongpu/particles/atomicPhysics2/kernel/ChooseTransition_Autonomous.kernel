/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"
#include "picongpu/particels/atomicPhysics2/enums/TransitionDataSet.hpp"
#include "picongpu/particles/atomicPhysics2/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/enums/ProcessIDConversion.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    namespace enums = picongpu::particles::atomicPhysics2::enums;

    /** extract transitionCollectionIndex from previously set transitionIndex
     *   for bound-free transitions is originally set by chooseTransitionKernel
     *
     * @see ExtractTransitionCollectionIndexKernel_BoundBound.kernel for more information
     *
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     * @tparam autonomousIonization is channel active?
     * @tparam electonicIonization is channel active?
     * @tparam fieldIonization is channel active?
     */
    template<
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation,
        bool T_electronicIonization,
        bool T_autonomousIonization,
        bool T_fieldIonization>
    struct ChooseTransitionKernel_Autonomous
    {
        using S_NumberPhysical = picongpu::particles::atomicPhysics2::processClass::NumberPhysicalTransitions<
            T_electronicExcitation,
            T_electronicDeexcitation,
            T_spontaneousDeexcitation,
            T_electronicIonization,
            T_autonomousIonization,
            T_fieldIonization>;

        // specialization for active paths, namespaces relative to current namespace
        using S_ProcessIDConversion = picongpu::particles::atomicPhysics2::processClass::ProcessIDConversion<
            T_electronicExcitation,
            T_electronicDeexcitation,
            T_spontaneousDeexcitation,
            T_electronicIonization,
            T_autonomousIonization,
            T_fieldIonization>;

        /** call operator
         *
         * called by ChooseTransition atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator, for float_X [0,1)
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super cells
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         *  atomic states block of transitions
         * @param transitionDataBox deviceDataBox giving access to autonomous
         *  transition property data
         * @param localRateCacheBox deviceDataBox giving access the local rate cache of all local super cells
         * @param ionBox deviceDataBox giving access to the species particle frames of all local super cells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_LocalTimeRemainingBox,
            typename T_AtomicStateAutonomousNumberTransitionsDataBox,
            typename T_AtomicStateAutonomousStartIndexBlockDataBox,
            typename T_AutonomousTransitionDataBox,
            typename T_LocalRateCacheBox,
            typename T_IonBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactory, /// const?, @todo Brian Marre, 2023
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_AtomicStateAutonomousNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateAutonomousStartIndexBlockDataBox const startIndexBox,
            T_AutonomousTransitionDataBox const transitionDataBox,
            /// @todo we strictly speaking only need autonomousDownward dataSet, Brian Marre, 2023
            T_LocalRateCacheBox const localRateCacheBox,
            T_IonBox ionBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                numberTransitionBox_not_autonomous_based,
                u8(T_AtomicStateAutonomousNumberTransitionsDataBox::processClassGroup)
                    == u8(enums::ProcessClassGroup::autonomousBased));
            PMACC_CASSERT_MSG(
                startIndexBox_not_autonomous_based,
                u8(T_AtomicStateAutonomousStartIndexBlockDataBox::processClassGroup)
                    == u8(enums::ProcessClassGroup::autonomousBased));
            PMACC_CASSERT_MSG(
                transitiondataBox_not_autonomous_based,
                u8(T_AutonomousTransitionDataBox::processClassGroup)
                    == u8(enums::ProcessClassGroup::autonomousBased));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or no ions
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto& rateCache = localRateCacheBox(superCellFieldIdx);
            auto rngGenerator = rngFactory(worker, superCellFieldIdx);

            // check whether autonomous transition and if yes, choose transitionIndex and processClass
            forEachLocalIonBoxEntry(
                [&numberTransitionsBox, &startIndexBox, &rateCache, &rngGenerator](T_Worker const& worker, auto& ion)
                {
                    if(ion[accepted_]
                        || (ion[transitionIndex_] != u32(atomicPhysics2::enums::TransitionDataSet::autonomousDownward)))
                        return; // already accepted ion or selected transitionType not autonomousDownward

                    auto const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    // usually 0, 1 depending in active channels
                    constexpr uint32_t factorDown = S_NumberPhysical::getFactorAutonomous();

                    uint32_t const numberTransitionsDown
                        = numberTransitionsBox.numberOfTransitionsDown(atomicStateCollectionIndex);
                    uint32_t const offset = numberTransitionsBox.offset(atomicStateCollectionIndex);

                    // debug check
                    if constexpr(picongpu::atomicPhysics2::debug::kernel::extractTransition::
                                     CHECK_FOR_INVALID_PROCESS_ID)
                    {
                        // debug check
                    }

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::extractTransition::PRINT_DEBUG_TO_CONSOLE)
                    {
                        printf(
                            "state %u transitionChoice %u offset %u "
                            "numberPhysicalTransitionsDown %u factorDown %u processID %u processClass %u "
                            "startIndexBlock %u",
                            atomicStateCollectionIndex,
                            ion[transitionIndex_],
                            offset,
                            numberPhysicalTransitionsDown,
                            factorDown,
                            processID,
                            static_cast<uint16_t>(S_ProcessIDConversion::getProcessClassAutonomous_Down(processID)),
                            startIndexBox.startIndexBlockTransitionsDown(atomicStateCollectionIndex));
                    }

                    r = rngGenerator();

                    float_X cumSum = 0._X;
                    for (uint32_t i=0u; i < numberTransitionsDown; ++i)
                    {
                        cumSum = cumSum + transitionDataBox.rate(i + offset);
                        if(r < cumSum)
                        {
                            ion[processClass_] =
                            break;
                        }
                    }

                    // set ion attributes
                    ion[processClass_] = S_ProcessIDConversion::getProcessClassAutonomous_Down(processID);
                    ion[transitionIndex_] = startIndexBox.startIndexBlockTransitionsDown(atomicStateCollectionIndex)
                        + (ion[transitionIndex_] - offset) / factorDown;

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::extractTransition::PRINT_DEBUG_TO_CONSOLE)
                    {
                        printf(" transitionIndex %u\n", ion[transitionIndex_]);
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
