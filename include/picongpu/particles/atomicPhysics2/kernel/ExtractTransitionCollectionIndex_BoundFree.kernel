/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessIDConversion.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** @class extract transitionCollectionIndex from previously set transitionIndex
     *   for bound-free transitions is originally set by chooseTransitionKernel
     *
     * @see ExtractTransitionCollectionIndexKernel_BoundBound.kernel for more information
     *
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     * @tparam autonomousIonization is channel active?
     * @tparam electonicIonization is channel active?
     * @tparam fieldIonization is channel active?
     */
    template<
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation,
        bool T_electronicIonization,
        bool T_autonomousIonization,
        bool T_fieldIonization>
    struct ExtractTransitionCollectionIndexKernel_BoundFree
    {
        using S_NumberPhysical = picongpu::particles::atomicPhysics2::processClass::NumberPhysicalTransitions<
            T_electronicExcitation,
            T_electronicDeexcitation,
            T_spontaneousDeexcitation,
            T_electronicIonization,
            T_autonomousIonization,
            T_fieldIonization>;

        // specialization for active paths, namespaces relative to current namespace
        using S_ProcessIDConversion = picongpu::particles::atomicPhysics2::processClass::ProcessIDConversion<
            T_electronicExcitation,
            T_electronicDeexcitation,
            T_spontaneousDeexcitation,
            T_electronicIonization,
            T_autonomousIonization,
            T_fieldIonization>;

        template<bool T_up>
        HDINLINE static void checkProcessClass(uint8_t const processClass)
        {
            if(processClass == static_cast<uint8_t>(255u))
            {
                if constexpr(T_up)
                    printf("atomicPhysics ERROR: invalid processId found in up bound-free "
                           "ExtractTransitionKernel\n");
                if constexpr(!T_up)
                    printf("atomicPhysics ERROR: invalid processId found in down bound-free "
                           "ExtractTransitionKernel\n");
            }
        }

        /** call operator
         *
         * called by ExtractTransitionCollectionIndex atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox giving access to the ion frames of all local superCells
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         *  atomic states block of transitions
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_IonBox,
            typename T_AtomicStateBoundFreeNumberTransitionsDataBox,
            typename T_AtomicStateBoundFreeStartIndexBlockDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_IonBox ionBox,
            T_AtomicStateBoundFreeNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateBoundFreeStartIndexBlockDataBox const startIndexBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                number_transition_dataBox_not_bound_free_based,
                u8(T_AtomicStateBoundFreeNumberTransitionsDataBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT_MSG(
                startIndex_dataBox_not_bound_free_based,
                u8(T_AtomicStateBoundFreeStartIndexBlockDataBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::boundFreeBased));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or no particles
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            // check whether bound-free transition and if yes,
            //      extract transition and roll random bin
            forEachLocalIonBoxEntry(
                [&numberTransitionsBox, &startIndexBox](T_Worker const& worker, auto& ion)
                {
                    if(ion[accepted_])
                        // already accepted ion
                        return;

                    auto const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    // usually 0, 1, 2 depending in active channels
                    constexpr uint32_t factorUp = S_NumberPhysical::getFactorBoundFreeUp();

                    uint32_t const numberPhysicalTransitionsUp
                        = factorUp * numberTransitionsBox.numberOfTransitionsUp(atomicStateCollectionIndex);

                    uint32_t const offset = numberTransitionsBox.offset(atomicStateCollectionIndex);

                    bool const belowOffset = (ion[transitionIndex_] < offset);
                    // recombination not yet implemented, Brian Marre, 2023
                    bool const aboveRange = (ion[transitionIndex_] >= offset + numberPhysicalTransitionsUp);
                    if(belowOffset || aboveRange)
                        // not a bound-free transition
                        return;

                    // up-ward bound-free transition
                    uint32_t const processID = (ion[transitionIndex_] - offset) % factorUp;

                    // check for unknown/wrong processID
                    if constexpr(picongpu::atomicPhysics2::debug::kernel::extractTransition::
                                     CHECK_FOR_INVALID_PROCESS_ID)
                    {
                        checkProcessClass<true>(S_ProcessIDConversion::getProcessClassBoundFree_Up(processID));
                    }

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::extractTransition::PRINT_DEBUG_TO_CONSOLE)
                    {
                        printf(
                            "state %u transitionChoice %u offset %u numberPhysicalTransitionsUp %u factorUp %u "
                            "processID %u processClass %u startIndexBlock %u",
                            atomicStateCollectionIndex,
                            ion[transitionIndex_],
                            offset,
                            numberPhysicalTransitionsUp,
                            factorUp,
                            processID,
                            static_cast<uint16_t>(S_ProcessIDConversion::getProcessClassBoundFree_Up(processID)),
                            startIndexBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex));
                    }

                    ion[processClass_] = S_ProcessIDConversion::getProcessClassBoundFree_Up(processID);
                    ion[transitionIndex_] = startIndexBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex)
                        + (ion[transitionIndex_] - offset) / factorUp;

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::extractTransition::PRINT_DEBUG_TO_CONSOLE)
                    {
                        printf(" transitionIndex %u\n", ion[transitionIndex_]);
                    }

                    // down-ward bound-free transition
                    /// @todo implement recombination, Brian Marre, 2023
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
