/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software you can redistribute it andor modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessIDConversionTable.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** @class extract transitionCollectionIndex from previously set transitionIndex
     *   for bound-free transitions is originally set by chooseTransitionKernel
     *
     * @see ExtractTransitionCollectionIndexKernel_BoundBound.kernel for more information
     *
     * @tparam T_ConfigNumber type of configNumber used for storage of atomic state by species
     * @tparam T_numberBins number of bins in the histogram
     *
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     * @tparam autonomousIonization is channel active?
     * @tparam electonicIonization is channel active?
     * @tparam fieldIonization is channel active?
     */
    template<
        typename T_ConfigNumber,
        uint32_t T_numberBins,
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation,
        bool T_electronicIonization,
        bool T_autonomousIonization,
        bool T_fieldIonization>
    struct ExtractTransitionCollectionIndexKernel_BoundFree
    {
        using S_NumberPhysical = picongpu::particles::atomicPhysics2::processClass ::NumberPhysicalTransitions<
            T_electronicExcitation,
            T_electronicDeexcitation,
            T_spontaneousDeexcitation,
            T_electronicIonization,
            T_autonomousIonization,
            T_fieldIonization>;

        using S_TransitionDataClass = picongpu::particles::atomicPhysics2::processClass ::TransitionDataClass;

        // specialization for active paths, namespaces relative to current namespace
        template<uint8_t T_numEntries, S_TransitionDataClass T_transitionDataClass>
        using S_ProcessIDConversionTable
            = picongpu::particles::atomicPhysics2 ::processClass::ProcessIDConversionTable<
                T_numEntries,
                T_transitionDataClass,
                T_electronicExcitation,
                T_electronicDeexcitation,
                T_spontaneousDeexcitation,
                T_electronicIonization,
                T_autonomousIonization,
                T_fieldIonization>;

        template<bool T_up>
        HDINLINE static void checkProcessClass(uint8_t const processClass)
        {
            if(processClass == static_cast<uint8_t>(255u))
            {
                if constexpr(T_up)
                    printf("atomicPhysics ERROR: invalid processId found in up bound-free"
                           "ExtractTransitionKernel\n");
                if constexpr(!T_up)
                    printf("atomicPhysics ERROR: invalid processId found in down bound-free"
                           "ExtractTransitionKernel\n");
            }
        }

        /** call operator
         *
         * called by ExtractTransitionCollectionIndex atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param chargeStateOrgaBox deviceDataBox giving access to charge state orga data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state
         *  property data
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         *  atomic states block of transitions
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryInt,
            typename T_IonBox,
            typename T_ChargeStateOrgaDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateBoundFreeNumberTransitionsDataBox,
            typename T_AtomicStateBoundFreeStartIndexBlockDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryInt rngFactory, /// @todo const?, Brian Marre, 2023
            T_IonBox ionBox,
            T_ChargeStateOrgaDataBox const chargeStateOrgaBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateBoundFreeNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateBoundFreeStartIndexBlockDataBox const startIndexBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // Offset without guards for random numbers
            auto const superCellLocalOffset = superCellIdx - areaMapping.getGuardingSuperCells();

            // end kernel if no particles
            if(!forEachLocalIonBoxEntry.hasParticles())
                return;

            // check whether bound-free transition and if yes,
            //      extract transition and roll random bin
            forEachLocalIonBoxEntry(
                [&superCellLocalOffset,
                 &rngFactory,
                 &chargeStateOrgaBox,
                 &atomicStateDataDataBox,
                 &numberTransitionsBox,
                 &startIndexBox](T_Worker const& worker, auto& particle)
                {
                    if(particle[accepted_])
                        // already accepted particle
                        return;

                    typename T_ConfigNumber::DataType const atomicStateConfigNumber
                        = particle[atomicConfigNumber_].getConfigNumber();

                    uint8_t const chargeState = T_ConfigNumber::getIonizationState(atomicStateConfigNumber);

                    uint32_t const atomicStateCollectionIndex = atomicStateDataDataBox.findStateCollectionIndex(
                        atomicStateConfigNumber,
                        chargeStateOrgaBox.numberAtomicStates(chargeState),
                        chargeStateOrgaBox.startIndexBlockAtomicStates(chargeState));

                    // usually 0, 1, 2 depending in active channels
                    constexpr uint32_t factorUp = S_NumberPhysical::getFactorBoundFreeUp();

                    uint32_t const numberPhysicalTransitionsUp
                        = factorUp * numberTransitionsBox.numberOfTransitionsUp(atomicStateCollectionIndex);

                    uint32_t const offset = numberTransitionsBox.offset(atomicStateCollectionIndex);

                    if((particle[transitionIndex_] < offset)
                       || (particle[transitionIndex_] >= offset + numberPhysicalTransitionsUp))
                        // not a bound-free transition
                        return;

                    auto rngGenerator = rngFactory(worker, superCellLocalOffset);

                    // up-ward bound-free transition
                    constexpr auto tableUp
                        = S_ProcessIDConversionTable<factorUp, S_TransitionDataClass::boundFree_Up>();

                    uint32_t const processID = (particle[transitionIndex_] - offset) % factorUp;

                    // debug check
                    if constexpr(picongpu::atomicPhysics2::ATOMIC_PHYSICS_EXTRACT_COLLECTION_IDX_HOT_DEBUG)
                    {
                        for(uint8_t i = static_cast<uint8_t>(0u); i < factorUp; i++)
                        {
                            if(processID == tableUp.table[i])
                                // debug check not invalid processID
                                checkProcessClass<true>(tableUp.table[i]);
                        }
                    }

                    // set particle attributes
                    for(uint8_t i = static_cast<uint8_t>(0u); i < factorUp; i++)
                    {
                        if(processID == tableUp.table[i])
                            particle[processClass_] = tableUp.table[i];
                    }
                    particle[transitionIndex_] = startIndexBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex)
                        + (particle[transitionIndex_] - offset) / factorUp;
                    particle[binIndex_] = rngGenerator() % T_numberBins;
                }

                // down-ward bound-free transition
                /// @todo implement recombination, Brian Marre, 2023
            );
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
