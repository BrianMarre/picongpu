/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

//! @file implements kernel randomly rolling a transition for macro particles

#pragma once

#include <pmacc/particles/algorithm/ForEach.hpp>
#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{

    /** choose transition from previously selected transitionType
     *
     * @tparam T_RateCache dataType if RateCache
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     * @tparam autonomousIonization is channel active?
     * @tparam electonicIonization is channel active?
     * @tparam fieldIonization is channel active?
     */
    template<
        typename T_RateCache,
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation,
        bool T_electronicIonization,
        bool T_autonomousIonization,
        bool T_fieldIonization>
    struct ChooseTransitionTypeKernel
    {
        /** call operator
         *
         * called by ChooseTransition atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator for float_X in [0,1)
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super cells
         * @param localRateCacheBox deviceDataBox giving access the local rate cache of all local super cells
         * @param ionBox deviceDataBox giving access to all ion frames of a species of all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryInt,
            typename T_LocalTimeRemainingBox,
            typename T_LocalRateCacheBox,
            typename T_IonBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactory, /// const?, @todo Brian Marre, 2023
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalRateCacheBox const localRateCacheBox,
            T_IonBox ionBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);

            // end kernel if superCell already finished or if contains no ions
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto rngGenerator = rngFactory(worker, superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);
            T_RateCache& rateCache = localRateCacheBox(superCellFieldIdx);

            // choose transition randomly,
            //  (processClass / transitionCollectionIndex / binIndex) are
            //  (extracted / extracted / randomly rolled) later by a ExtractTransitionCollectionIndex_*Kernel
            forEachLocalIonBoxEntry(
                [&rateCache, &rngGenerator](T_Worker const& worker, auto& ion)
                {
                    constexpr uint32_t numberRateCacheEntries = T_RateCache::numberDataSets;

                    if(ion[accepted_])
                        return;
                    auto const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    r = rngGenerator();

                    float_X cumSum = 0._X;
                    for (uint32_t i=0u; i < numberRateCacheEntries; ++i)
                    {
                        cumSum = cumSum + rateCache.rate(i, atomicStateCollectionIndex);
                        if(r < cumSum)
                        {
                            // only in between storage, i is the transitionDataSetIndex not the transitionIndex
                            ion[transitionIndex_] = i;
                            // found
                            break;
                        }
                    }
                    if( r > cumSum)
                    {
                        ion[transitionIndex_] = u32(atomicPhysics2::enums::transitionDataSet::noChange);
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
