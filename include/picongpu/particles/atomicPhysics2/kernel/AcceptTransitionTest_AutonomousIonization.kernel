/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software you can redistribute it andor modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/rateCalculation/AutonomousTransitionRates.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** test for accepting noChange transitions
     *
     * @tparam T_AcceptanceFunctor functor for acceptance probability
     */
    template<typename T_AcceptanceFunctor>
    struct AcceptTransitionTestKernel_AutonomousIonization
    {
        /** call operator
         *
         * called by AcceptTransitionTest atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param localTimeStepBox deviceDataBox giving access to the local atomic physics
         *  time step of all local superCells
         * @param autonomousTransitionDataBox deviceDataBox giving access to autonomous
         *  transition data
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_IonBox,
            typename T_TimeStepDataBox,
            typename T_AutonomousTransitionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactory, /// const?, @todo Brian Marre, 2023
            T_IonBox ionBox,
            T_TimeStepDataBox const localTimeStepBox,
            T_AutonomousTransitionDataBox const autonomousTransitionDataBox) const
        {
            // check that correct databox given
            PMACC_CASSERT(
                static_cast<uint8_t>(T_AutonomousTransitionDataBox::processClassGroup)
                == static_cast<uint8_t>(
                    picongpu::particles::atomicPhysics2::processClass::ProcessClassGroup::autonomousBased));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            float_X const timeStep = localTimeStepBox(superCellFieldIdx);

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            if(!forEachLocalIonBoxEntry.hasParticles())
                return;
            // end kernel if no particles

            // get no change rate from rateCache and try to accept transition
            forEachLocalIonBoxEntry(
                [&superCellFieldIdx, &rngFactory, &timeStep, &autonomousTransitionDataBox](
                    T_Worker const& worker,
                    auto& ion)
                {
                    namespace procClass = picongpu::particles::atomicPhysics2::processClass;

                    bool const notAutonomousIonization
                        = (ion[processClass_] != u8(procClass::ProcessClass::autonomousIonization));

                    if(ion[accepted_] || notAutonomousIonization)
                        return;

                    auto rngGenerator = rngFactory(worker, superCellFieldIdx);

                    float_X const rate = picongpu::particles::atomicPhysics2::rateCalculation ::
                        AutonomousTransitionRates ::template rateAutonomousIonization<T_AutonomousTransitionDataBox>(
                            ion[transitionIndex_],
                            autonomousTransitionDataBox);

                    float_X const probability = T_AcceptanceFunctor::probabilityChange(rate, timeStep);

                    if constexpr(picongpu::atomicPhysics2::ATOMIC_PHYSICS_ACCEPTANCE_PROBABILITY_DEBUG_PRINT)
                        printf("autonomous ionization %.8e\n ", probability);

                    // try to accept
                    if(probability >= rngGenerator())
                        ion[accepted_] = true;
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
