/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software you can redistribute it andor modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp" // need: picongpu/unitless/grid.unitless for CELL_VOLUME

#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/rateCalculation/BoundBoundTransitionRates.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** test for accepting electronicExciation transitions
     *
     * @tparam T_Histogram type of the histogram
     * @tparam T_n_max number of levels
     * @tparam T_AcceptanceFunctor functor for acceptance probability
     * @tparam T_excitation true =^= excitation, false =^= deexcitation
     */
    template<typename T_Histogram, uint8_t T_n_max, typename T_AcceptanceFunctor, bool T_excitation>
    struct AcceptTransitionTestKernel_ElectronicDeOrExcitation
    {
        /** call operator
         *
         * called by AcceptTransitionTest atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator
         * @param ionBox deviceDataBox giving access to the particle frames
         *  of all local superCells
         * @param localTimeStepBox deviceDataBox giving access to the local time step length
         *  of all local superCells
         * @param localElectronHistogramDataBox deviceDataBox giving access to the local
         *  electron histograms of all local superCells
         * @param chargeStateDataDataBox deviceDataBox giving access to charge state property data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state property data
         * @param boundBoundTransitionDataBox deviceDataBox giving access to bound-bound transition data
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_IonBox,
            typename T_TimeStepDataBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_BoundBoundTransitionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactory, /// const?, @todo Brian Marre, 2023
            T_IonBox ionBox,
            T_TimeStepDataBox const localTimeStepBox,
            T_LocalElectronHistogramDataBox const localElectronHistogramDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_BoundBoundTransitionDataBox const boundBoundTransitionDataBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            // get histogram for current superCell
            T_Histogram& electronHistogram = localElectronHistogramDataBox(superCellFieldIdx);

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            float_X const timeStep = localTimeStepBox(superCellFieldIdx);

            // end kernel if no particles
            if(!forEachLocalIonBoxEntry.hasParticles())
                return;

            // calculate rate of chosen transition and try to accept transition
            forEachLocalIonBoxEntry(
                [&superCellFieldIdx,
                 &rngFactory,
                 &timeStep,
                 &electronHistogram,
                 &atomicStateDataDataBox,
                 &boundBoundTransitionDataBox](T_Worker const& worker, auto& particle)
                {
                    namespace procClass = picongpu::particles::atomicPhysics2::processClass;

                    if constexpr(T_excitation)
                    {
                        if((particle[accepted_])
                           || (particle[processClass_] != u8(procClass::ProcessClass::electronicExcitation)))
                            return;
                    }
                    if constexpr(!T_excitation)
                    {
                        if((particle[accepted_])
                           || (particle[processClass_] != u8(procClass::ProcessClass::electronicDeexcitation)))
                            return;
                    }

                    // UNIT_LENGTH^3
                    constexpr float_X volumeScalingFactor
                        = pmacc::math::CT::volume<SuperCellSize>::type::value * picongpu::CELL_VOLUME;

                    uint32_t const binIndex = particle[binIndex_];
                    // eV
                    float_X const energy = electronHistogram.getBinEnergy(binIndex);
                    // eV
                    float_X const binWidth = electronHistogram.getBinWidth(binIndex);
                    // 1/(UNIT_LENGTH^3 * eV)
                    float_X const density = electronHistogram.getBinWeight0(binIndex) / volumeScalingFactor / binWidth;

                    auto rngGenerator = rngFactory(worker, superCellFieldIdx);

                    // 1/UNIT_TIME
                    float_X const rate = picongpu::particles::atomicPhysics2::rateCalculation ::
                        BoundBoundTransitionRates<T_n_max>::template rateCollisionalBoundBoundTransition<
                            T_AtomicStateDataDataBox,
                            T_BoundBoundTransitionDataBox,
                            T_excitation>(
                            energy,
                            binWidth,
                            density,
                            particle[transitionIndex_],
                            atomicStateDataDataBox,
                            boundBoundTransitionDataBox);

                    // unitless
                    float_X const probability = T_AcceptanceFunctor::probabilityChange(rate, timeStep);

                    // try to accept
                    if(probability >= rngGenerator())
                        particle[accepted_] = true;
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel