/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessIDConversion.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    namespace procClass = picongpu::particles::atomicPhysics2::processClass;

    /** extract transitionCollectionIndex from previously set transitionIndex
     *   for bound-free transitions is originally set by chooseTransitionKernel
     *
     * @see ExtractTransitionCollectionIndexKernel_BoundBound.kernel for more information
     *
     * @tparam T_ConfigNumber type of configNumber used for storage of atomic state by species
     *
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     * @tparam autonomousIonization is channel active?
     * @tparam electonicIonization is channel active?
     * @tparam fieldIonization is channel active?
     */
    template<
        typename T_ConfigNumber,
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation,
        bool T_electronicIonization,
        bool T_autonomousIonization,
        bool T_fieldIonization>
    struct ExtractTransitionCollectionIndexKernel_Autonomous
    {
        using S_NumberPhysical = picongpu::particles::atomicPhysics2::processClass::NumberPhysicalTransitions<
            T_electronicExcitation,
            T_electronicDeexcitation,
            T_spontaneousDeexcitation,
            T_electronicIonization,
            T_autonomousIonization,
            T_fieldIonization>;

        // specialization for active paths, namespaces relative to current namespace
        using S_ProcessIDConversion = picongpu::particles::atomicPhysics2::processClass::ProcessIDConversion<
            T_electronicExcitation,
            T_electronicDeexcitation,
            T_spontaneousDeexcitation,
            T_electronicIonization,
            T_autonomousIonization,
            T_fieldIonization>;

        HDINLINE static void checkProcessClass(uint8_t const processClass)
        {
            if(processClass == static_cast<uint8_t>(255u))
            {
                printf("atomicPhysics ERROR: invalid processId found in autonomous "
                       "ExtractTransitionKernel\n");
            }
        }

        /** call operator
         *
         * called by ExtractTransitionCollectionIndex atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox containing the particle frames of all local superCells
         * @param chargeStateOrgaBox deviceDataBox giving access to charge state orga data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state
         *  property data
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         *  atomic states block of transitions
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_IonBox,
            typename T_ChargeStateOrgaDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateAutonomousNumberTransitionsDataBox,
            typename T_AtomicStateAutonomousStartIndexBlockDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_IonBox ionBox,
            T_ChargeStateOrgaDataBox const chargeStateOrgaBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateAutonomousNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateAutonomousStartIndexBlockDataBox const startIndexBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                number_transition_dataBox_not_autonomous_based,
                u8(T_AtomicStateAutonomousNumberTransitionsDataBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::autonomousBased));
            PMACC_CASSERT_MSG(
                startIndex_dataBox_not_autonomous_based,
                u8(T_AtomicStateAutonomousStartIndexBlockDataBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::autonomousBased));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if no ions
            if(!forEachLocalIonBoxEntry.hasParticles())
                return;

            // check whether autonomous transition and if yes,
            //      extract transition and roll random bin
            forEachLocalIonBoxEntry(
                [&chargeStateOrgaBox, &atomicStateDataDataBox, &numberTransitionsBox, &startIndexBox](
                    T_Worker const& worker,
                    auto& ion)
                {
                    if(ion[accepted_])
                        return; // already accepted ion

                    typename T_ConfigNumber::DataType const atomicStateConfigNumber
                        = ion[atomicConfigNumber_].getConfigNumber();

                    uint8_t const chargeState = T_ConfigNumber::getChargeState(atomicStateConfigNumber);

                    uint32_t const atomicStateCollectionIndex = atomicStateDataDataBox.findStateCollectionIndex(
                        atomicStateConfigNumber,
                        chargeStateOrgaBox.numberAtomicStates(chargeState),
                        chargeStateOrgaBox.startIndexBlockAtomicStates(chargeState));

                    // usually 0, 1 depending in active channels
                    constexpr uint32_t factorDown = S_NumberPhysical::getFactorAutonomous();

                    uint32_t const numberPhysicalTransitionsDown
                        = factorDown * numberTransitionsBox.numberOfTransitionsDown(atomicStateCollectionIndex);

                    uint32_t const offset = numberTransitionsBox.offset(atomicStateCollectionIndex);


                    bool const belowOffset = ion[transitionIndex_] < offset;
                    // up-ward autonomous transitions do not exist
                    bool const aboveRange = ion[transitionIndex_] >= offset + numberPhysicalTransitionsDown;
                    if(belowOffset || aboveRange)
                        return; // not a autonomous transition

                    // is down-ward autonomous transition

                    uint32_t const processID = (ion[transitionIndex_] - offset) % factorDown;

                    // debug check
                    if constexpr(picongpu::atomicPhysics2::debug::kernel::extractTransition::CHECK_FOR_INVALID_PROCESS_ID)
                    {
                        checkProcessClass(S_ProcessIDConversion::getProcessClassAutonomous_Down(processID));
                    }

                    // set ion attributes
                    ion[processClass_] = S_ProcessIDConversion::getProcessClassAutonomous_Down(processID);
                    ion[transitionIndex_] = startIndexBox.startIndexBlockTransitionsDown(atomicStateCollectionIndex)
                        + (ion[transitionIndex_] - offset) / factorDown;
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
