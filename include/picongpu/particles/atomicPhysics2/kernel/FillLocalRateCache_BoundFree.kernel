/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
// need unit.param, UNIT_LENGTH for normalisation

#include "picongpu/particles/atomicPhysics2/processClass/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/rateCalculation/BoundFreeTransitionRates.hpp"

#include <pmacc/algorithms/math/PowerFunction.hpp>
#include <pmacc/lockstep/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** @class fill rate cache kernel
     *
     * add for all atomic states and all bins the rate of each upward bound-free
     *  transition to the rate cache slot of the atomic state.
     *
     * called by fillRateCache atomicPhysics sub-stage
     *
     * @todo implement recombination, Brian Marre, 2023
     *
     * @attention assumes that the rate cache has been reset to 0 before first
     *  fillLocalRateChacheKernel call this atomicPhysics step
     *
     * @tparam T_Histogram type of histogram used per superCell
     *
     * @tparam T_numberLevels maximum principal quantum number of atomic states of ion species
     * @tparam T_numberAtomicStates number of atomic states in atomic data data base
     * @tparam T_numberBins number of regular bins in histogram
     *
     * @tparam electronicIonization is channel active?
     */
    template<uint8_t T_numberLevels, uint32_t T_numberAtomicStates, uint32_t T_numberBins, bool T_electronicIonization>
    struct FillLocalRateCacheKernel_BoundFree
    {
        /** call operator
         *
         * called by FillLocalRateCache atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param localRateCacheBox deviceDataBox giving access to the local rate cache of
         *  all local superCells
         * @param localElectronHistogramDataBox giving access to the local electron histograms
         *  of all local superCells
         * @param chargeStateDataDataBox deviceDataBox giving access to charge state property data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state property data
         * @param startIndexDataBox deviceDataBox giving access to the start index of each atomic states'
         *  block of transitions in the up-/down-ward bound-bound transition collection
         * @param numberTransitionsDataBox deviceDataBox giving access to the number of transitions
         *   of each atomic state up- and down-ward
         * @param boundFreeTransitionDataBox deviceDataBox giving access to bound-free transition property data
         *
         * @todo implement recombination, Brian Marre, 2023
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalRateCacheBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateStartIndexBox,
            typename T_AtomicStateNumberTransitionsBox,
            typename T_BoundFreeTransitionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalRateCacheBox localRateCacheBox,
            T_LocalElectronHistogramDataBox const localElectronHistogramDataBox,
            T_ChargeStateDataDataBox const chargeStateDataDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateStartIndexBox const startIndexDataBox,
            T_AtomicStateNumberTransitionsBox const numberTransitionsDataBox,
            T_BoundFreeTransitionDataBox const boundFreeTransitionDataBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT(
                static_cast<uint8_t>(T_AtomicStateNumberTransitionsBox::processClassGroup)
                == static_cast<uint8_t>(
                    picongpu::particles::atomicPhysics2::processClass::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT(
                static_cast<uint8_t>(T_AtomicStateStartIndexBox::processClassGroup)
                == static_cast<uint8_t>(
                    picongpu::particles::atomicPhysics2::processClass::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT(
                static_cast<uint8_t>(T_BoundFreeTransitionDataBox::processClassGroup)
                == static_cast<uint8_t>(
                    picongpu::particles::atomicPhysics2::processClass::ProcessClassGroup::boundFreeBased));

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc())))
                - areaMapping.getGuardingSuperCells();

            auto& rateCache = localRateCacheBox(superCellFieldIdx);
            auto& histogram = localElectronHistogramDataBox(superCellFieldIdx);

            auto forEachAtomicStateAndBin
                = pmacc::lockstep::makeForEach<T_numberAtomicStates * T_numberBins, T_Worker>(worker);

            forEachAtomicStateAndBin(
                [&worker,
                 &rateCache,
                 &histogram,
                 &chargeStateDataDataBox,
                 &atomicStateDataDataBox,
                 &startIndexDataBox,
                 &numberTransitionsDataBox,
                 &boundFreeTransitionDataBox](uint32_t const linearIdx)
                {
                    uint32_t const binIndex = linearIdx / T_numberAtomicStates;
                    uint32_t const atomicStateCollectionIndex = linearIdx % T_numberAtomicStates;

                    uint32_t const numberTransitionsUp
                        = numberTransitionsDataBox.numberOfTransitionsUp(atomicStateCollectionIndex);

                    uint32_t offset = startIndexDataBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex);

                    // UNIT_LENGTH^3
                    constexpr float_X volumeScalingFactor
                        = pmacc::math::CT::volume<SuperCellSize>::type::value * picongpu::CELL_VOLUME;

                    for(uint32_t i = static_cast<uint32_t>(0u); i < numberTransitionsUp; i++)
                    {
                        if constexpr(T_electronicIonization)
                        {
                            rateCache.add(
                                worker,
                                atomicStateCollectionIndex,
                                -picongpu::particles::atomicPhysics2::rateCalculation::BoundFreeTransitionRates<
                                    T_numberLevels>::
                                    template rateCollisionalIonizationTransition<
                                        T_ChargeStateDataDataBox,
                                        T_AtomicStateDataDataBox,
                                        T_BoundFreeTransitionDataBox>(
                                        histogram.getBinEnergy(binIndex),
                                        histogram.getBinWidth(binIndex),
                                        // 1/(UNIT_LENGTH^3*eV)
                                        histogram.getBinWeight0(binIndex) / volumeScalingFactor
                                            / histogram.getBinWidth(binIndex),
                                        // transitionCollectionIndex
                                        offset + i,
                                        chargeStateDataDataBox,
                                        atomicStateDataDataBox,
                                        boundFreeTransitionDataBox));
                        }
                    }
                });
            worker.sync();
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
