/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PMacc is free software: you can redistribute it and/or modify
 * it under the terms of either the GNU General Public License or
 * the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PMacc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License and the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the GNU Lesser General Public License along with PMacc.
 * If not, see <http://www.gnu.org/licenses/>.
 */

//! @file set momentum of all particles of the species to zero

#pragma once


#include "picongpu/simulation_defines.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** debug kernel
     *
     * configurable called by SetMomentumZero sub-stage, bins all macro particles of the species
     * T_ElectronSpecies in the given superCell into the given histogram
     */
    struct SetMomentumToZeroKernel
    {
        /** call operator
         *
         * called by SetMomentumToZero atomicPhysics debug stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param electronBox deviceDataBox giving access to the particle species particle frames
         *   of all local superCells
         */
        template<typename T_Worker, typename T_AreaMapping, typename T_ElectronBox>
        HDINLINE void operator()(T_Worker const& worker, T_AreaMapping const areaMapping, T_ElectronBox electronBox)
            const
        {
            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            auto forEachLocalElectronBoxEntry
                = pmacc::particles::algorithm::acc::makeForEach(worker, electronBox, superCellIdx);

            // end kernel if no particles
            if(!forEachLocalElectronBoxEntry.hasParticles())
                return;

            // bin electrons
            forEachLocalElectronBoxEntry([](T_Worker const& worker, auto& electron)
                                         { electron[momentum_] = float3_X::create(0.); });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
