/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PMacc is free software: you can redistribute it and/or modify
 * it under the terms of either the GNU General Public License or
 * the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PMacc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License and the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the GNU Lesser General Public License along with PMacc.
 * If not, see <http://www.gnu.org/licenses/>.
 */

//! @file dump all per superCell atomicPhysics data to console

#pragma once

// need atomicPhysics2_Debug.param
#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/DebugHelper.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** debug kernel
     *
     * dump all superCell based atomicPhysics data to console
     *
     * @attention only useful in serial and cpu-build!
     */
    struct DumpSuperCellDataToConsoleKernel
    {
        /** call operator
         *
         * called by DumpSuperCellDataToConsole atomicPhysics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param localRejectionProbabilityCacheBox deviceDataBox giving access to the
         *  local RejectionProbabilityCache of each local superCells
         * @param localElectronHistogramBox deviceDataBox giving access to the
         *  local electron histogram of all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalElectronHistogramDataBox,
            typename T_LocalRejectionProbabilityCacheDataBox,
            typename T_LocalTimeStepDataBox,
            typename T_LocalTimeRemainingDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalElectronHistogramDataBox const localElectronHistogramDataBox,
            T_LocalRejectionProbabilityCacheDataBox const localRejectionProbabilityCacheBox,
            T_LocalTimeStepDataBox const localTimeStepBox,
            T_LocalTimeRemainingDataBox const localTimeRemainingBox) const
        {
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc())))
                - areaMapping.getGuardingSuperCells();

            // get histogram for current superCell
            auto const& histogram = localElectronHistogramDataBox(superCellFieldIdx);
            auto const& rejectionProbabilityCache = localRejectionProbabilityCacheBox(superCellFieldIdx);

            if constexpr(picongpu::atomicPhysics2::debug::electronHistogram::PRINT_TO_CONSOLE)
                debug::printHistogramToConsole(histogram);

            if constexpr(picongpu::atomicPhysics2::debug::rejectionProbabilityCache::PRINT_TO_CONSOLE)
                debug::printRejectionProbabilityCacheToConsole(rejectionProbabilityCache);

            auto& timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto& timeStep = localTimeStepBox(superCellFieldIdx);

            printf("timeRemaining[UNIT_TIME]: %.8e timeStep[UNIT_TIME]: %.8e\n", timeRemaining, timeStep);
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
