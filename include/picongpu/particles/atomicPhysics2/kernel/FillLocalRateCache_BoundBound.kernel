/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
// need grid.unitless for CELL_VOLUME

#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/TransitionOrdering.hpp"
#include "picongpu/particles/atomicPhysics2/rateCalculation/BoundBoundTransitionRates.hpp"

#include <pmacc/algorithms/math/PowerFunction.hpp>
#include <pmacc/lockstep/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    namespace procClass = picongpu::particles::atomicPhysics2::processClass;

    /** fill rate cache kernel
     *
     * add for all atomic states and all bins the rate of each up-/down-ward
     *  bound-bound transition to the rate cache slot of the atomic state.
     *
     * @attention assumes that the rate cache has been reset to 0 before first
     *  fillLocalRateChacheKernel call this atomicPhysics step
     *
     * @tparam T_Histogram type of histogram used per superCell
     *
     * @tparam T_numberLevels maximum principal quantum number of atomic states of ion species
     * @tparam T_numberAtomicStates number of atomic states in atomic data data base
     * @tparam T_numberBins number of regular bins in histogram
     *
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     * @tparam T_TransitionOrdering ordering of assumed for transition DataBox
     */
    template<
        uint8_t T_numberLevels,
        uint32_t T_numberAtomicStates,
        uint32_t T_numberBins,
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation,
        procClass::TransitionOrdering T_TransitionOrdering>
    struct FillLocalRateCacheKernel_BoundBound
    {
        /** call operator
         *
         * called by FillLocalRateCache atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param localRateCacheBox deviceDataBox giving access to the local rate cache of
         *  all local superCells
         * @param localElectronHistogramDataBox giving access to the local electron histograms
         *  of all local superCells
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state property data
         * @param startIndexDataBox deviceDataBox giving access to the start index of each atomic states'
         *  block of transitions in the up-/down-ward bound-bound transition collection
         * @param numberTransitionsDataBox deviceDataBox giving access to the number of transitions
         *   of each atomic state up- and down-ward
         * @param boundFreeTransitionDataBox deviceDataBox giving access to bound-bound transition property data
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalRateCacheBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateStartIndexBox,
            typename T_AtomicStateNumberTransitionsBox,
            typename T_BoundBoundTransitionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalRateCacheBox localRateCacheBox,
            T_LocalElectronHistogramDataBox const localElectronHistogramDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateStartIndexBox const startIndexDataBox,
            T_AtomicStateNumberTransitionsBox const numberTransitionsDataBox,
            T_BoundBoundTransitionDataBox const boundBoundTransitionDataBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                number_transitions_dataBox_not_bound_bound_based,
                u8(T_AtomicStateNumberTransitionsBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                startIndex_dataBox_not_bound_free_based,
                u8(T_AtomicStateStartIndexBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                transition_dataBox_not_boud_bound_based,
                u8(T_BoundBoundTransitionDataBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::boundBoundBased));
            // check ordering of transition dataBox
            PMACC_CASSERT_MSG(
                wrong_ordering_of_DataBox,
                u8(T_BoundBoundTransitionDataBox::transitionOrdering) == u8(T_TransitionOrdering));

            constexpr bool upward = (u8(T_TransitionOrdering) == u8(procClass::TransitionOrdering::byLowerState));

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc())))
                - areaMapping.getGuardingSuperCells();

            auto& rateCache = localRateCacheBox(superCellFieldIdx);
            auto& histogram = localElectronHistogramDataBox(superCellFieldIdx);

            auto forEachAtomicStateAndBin
                = pmacc::lockstep::makeForEach<T_numberAtomicStates * T_numberBins, T_Worker>(worker);
            auto forEachAtomicState = pmacc::lockstep::makeForEach<T_numberAtomicStates, T_Worker>(worker);

            forEachAtomicStateAndBin(
                [&worker,
                 &rateCache,
                 &histogram,
                 &atomicStateDataDataBox,
                 &startIndexDataBox,
                 &numberTransitionsDataBox,
                 &boundBoundTransitionDataBox](uint32_t const linearIdx)
                {
                    uint32_t const binIndex = linearIdx / T_numberAtomicStates;
                    uint32_t const atomicStateCollectionIndex = linearIdx % T_numberAtomicStates;

                    uint32_t numberTransitions;
                    if constexpr(upward)
                        numberTransitions = numberTransitionsDataBox.numberOfTransitionsUp(atomicStateCollectionIndex);
                    else
                        numberTransitions
                            = numberTransitionsDataBox.numberOfTransitionsDown(atomicStateCollectionIndex);

                    uint32_t offset;
                    if constexpr(upward)
                        offset = startIndexDataBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex);
                    else
                        offset = startIndexDataBox.startIndexBlockTransitionsDown(atomicStateCollectionIndex);

                    // UNIT_LENGTH^3
                    constexpr float_X volumeScalingFactor
                        = pmacc::math::CT::volume<SuperCellSize>::type::value * picongpu::CELL_VOLUME;

                    for(uint32_t i = static_cast<uint32_t>(0u); i < numberTransitions; i++)
                    {
                        // collisional bound-bound de- or excitation
                        if constexpr(
                            // upward and electronic excitation channel is active
                            (upward && T_electronicExcitation) ||
                            // downward and electronic deexcitation channel is active
                            ((!upward) && T_electronicDeexcitation))
                        {
                            rateCache.add(
                                worker,
                                atomicStateCollectionIndex,
                                -picongpu::particles::atomicPhysics2::rateCalculation:: // rate
                                BoundBoundTransitionRates<T_numberLevels>::
                                    template rateCollisionalBoundBoundTransition<
                                        T_AtomicStateDataDataBox,
                                        T_BoundBoundTransitionDataBox,
                                        upward>(
                                        histogram.getBinEnergy(binIndex),
                                        histogram.getBinWidth(binIndex),
                                        // 1/(UNIT_LENGTH^3*eV)
                                        histogram.getBinWeight0(binIndex) / volumeScalingFactor
                                            / histogram.getBinWidth(binIndex),
                                        // transitionCollectionIndex
                                        offset + i,
                                        atomicStateDataDataBox,
                                        boundBoundTransitionDataBox));
                        }
                    }
                });

            // spontaneous radiative deexcitation
            if constexpr((!upward) and T_spontaneousDeexcitation)
            {
                forEachAtomicState(
                    [&worker,
                     &rateCache,
                     &atomicStateDataDataBox,
                     &startIndexDataBox,
                     &numberTransitionsDataBox,
                     &boundBoundTransitionDataBox](uint32_t const atomicStateCollectionIndex)
                    {
                        uint32_t const numberTransitions
                            = numberTransitionsDataBox.numberOfTransitionsDown(atomicStateCollectionIndex);
                        uint32_t const offset
                            = startIndexDataBox.startIndexBlockTransitionsDown(atomicStateCollectionIndex);

                        for(uint32_t i = static_cast<uint32_t>(0u); i < numberTransitions; i++)
                        {
                            rateCache.add(
                                atomicStateCollectionIndex,
                                -picongpu::particles::atomicPhysics2::rateCalculation ::BoundBoundTransitionRates<
                                    T_numberLevels>::
                                    template rateSpontaneousRadiativeDeexcitation<
                                        T_AtomicStateDataDataBox,
                                        T_BoundBoundTransitionDataBox>(
                                        // transitionCollectionIndex
                                        offset + i,
                                        atomicStateDataDataBox,
                                        boundBoundTransitionDataBox));
                        }
                    });
            }
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
