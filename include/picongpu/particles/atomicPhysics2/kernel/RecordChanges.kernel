/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/DeltaEnergyTransition.hpp"
#include "picongpu/particles/atomicPhysics2/SetAtomicState.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/IsProcess.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClassGroup.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    /** update atomic state and for collisional processes add delta energy of transition
     *  to used electron histogram bin
     *
     * @tparam T_ProcessClass processClass for which to execute this kernel
     * @tparam T_Histogram type of the histogram
     */
    template<picongpu::particles::atomicPhysics2::processClass::ProcessClass T_ProcessClass, typename T_Histogram>
    struct RecordChangesKernel
    {
        /** call operator
         *
         * called by RecordChanges atomicPhysics sub-stage for each active processClass
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param localElectronHistogramDataBox deviceDataBox giving access to the local
         *  electron histograms of all local superCells
         * @param atomicStateBox deviceDataBox giving access to atomic state property data
         * @param transitionBox deviceDataBox giving access to transition property data,
         * @param chargeStateBox optional deviceDataBox giving access to charge state property data
         *  required for T_ProcessClassGroup = boundFreeBased
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_IonBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_AtomicStateDataBox,
            typename T_TransitionDataBox,
            typename... T_ChargeStateBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_IonBox const ionBox,
            T_LocalElectronHistogramDataBox localElectronHistogramDataBox,
            T_AtomicStateDataBox atomicStateBox,
            T_TransitionDataBox transitionBox,
            T_ChargeStateBox... chargeStateBox) const
        {
            namespace procClass = picongpu::particles::atomicPhysics2::processClass;

            // check transition dataBox consistent with T_ProcessClass
            //  otherwise unphysical behaviour and/or illegal memory accesses
            PMACC_CASSERT_MSG(
                transition_dataBox_and_processClass_inconsistent,
                procClass::IsProcess<T_TransitionDataBox::processClassGroup>::check(u8(T_ProcessClass)));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            // get histogram for current superCell
            T_Histogram& electronHistogram = localElectronHistogramDataBox(superCellFieldIdx);

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if no particles
            if(!forEachLocalIonBoxEntry.hasParticles())
                return;

            forEachLocalIonBoxEntry(
                [&electronHistogram, &atomicStateBox, &transitionBox, &chargeStateBox...](
                    T_Worker const& worker,
                    auto& ion)
                {
                    uint8_t const processClass = ion[processClass_];

                    // not a T_ProcessClass transition
                    if((processClass) != u8(T_ProcessClass))
                        return;

                    uint32_t const transitionIndex = ion[transitionIndex_];

                    float_X deltaEnergy = 0._X;
                    if constexpr(procClass::IsProcess<procClass::ProcessClassGroup::electronicCollisional>::check(
                                     u8(T_ProcessClass)))
                    {
                        // electronic collisional process
                        deltaEnergy = picongpu::particles::atomicPhysics2::DeltaEnergyTransition::get<
                                T_AtomicStateDataBox,
                                T_TransitionDataBox,
                                T_ChargeStateBox...>(
                            transitionIndex,
                            atomicStateBox,
                            transitionBox,
                            chargeStateBox...);
                    }

                    typename T_AtomicStateDataBox::Idx newConfigNumber;

                    if constexpr(procClass::IsProcess<procClass::ProcessClassGroup::upward>::check(u8(T_ProcessClass)))
                    {
                        // upward process
                        if constexpr(procClass::IsProcess<procClass::ProcessClassGroup::electronicCollisional>::check(
                                         u8(T_ProcessClass)))
                            deltaEnergy = -deltaEnergy;

                        // new state is upper state of transition
                        newConfigNumber
                            = atomicStateBox.configNumber(transitionBox.upperStateCollectionIndex(transitionIndex));
                    }
                    else
                    {
                        // downward process, new state is lower state of transition
                        newConfigNumber
                            = atomicStateBox.configNumber(transitionBox.lowerStateCollectionIndex(transitionIndex));
                    }

                    picongpu::particles::atomicPhysics2::SetAtomicState::op<T_AtomicStateDataBox::ConfigNumber>(ion, newConfigNumber);

                    // record used energy
                    if constexpr(procClass::IsProcess<procClass::ProcessClassGroup::electronicCollisional>::check(
                                     u8(T_ProcessClass)))
                        electronHistogram.addDeltaEnergy(worker, ion[binIndex_], deltaEnergy);
                });
        }
    };

    template<typename T_Histogram>
    struct RecordChangesKernel<picongpu::particles::atomicPhysics2::processClass::ProcessClass::noChange, T_Histogram>;
} // namespace picongpu::particles::atomicPhysics2::kernel
