/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    namespace procClass = picongpu::particles::atomicPhysics2::processClass;

    //! extract transitionCollectionIndex from previously set transitionIndex
    struct ExtractTransitionCollectionIndexKernel_NoChange
    {
        /** call operator
         *
         * called by ExtractTransitionCollectionIndex atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox containing the particle frames of all local superCells
         */
        template<typename T_Worker, typename T_AreaMapping, typename T_IonBox>
        HDINLINE void operator()(T_Worker const& worker, T_AreaMapping const areaMapping, T_IonBox ionBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if no particles
            if(!forEachLocalIonBoxEntry.hasParticles())
                return;

            // check whether no-change transition and if yes set processClass 0
            forEachLocalIonBoxEntry(
                [](T_Worker const& worker, auto& ion)
                {
                    if(
                        // already accepted ion
                        (ion[accepted_]) ||
                        // not a no-change transition
                        !(ion[transitionIndex_] == static_cast<uint32_t>(0u)))
                    {
                        return;
                    }

                    ion[processClass_] = u8(procClass::ProcessClass::noChange);

                    // transitionIndex and binIndex are not relevant for no-change transitions
                    // => no need to set them
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
