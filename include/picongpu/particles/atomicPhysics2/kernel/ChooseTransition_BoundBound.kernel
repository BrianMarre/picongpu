/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/rateCalculation/BoundBoundTransitionRates.hpp"

#include "picongpu/particles/atomicPhysics2/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionDirection.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionType.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionOrderingFor.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionDataSetFor.hpp"

#include "picongpu/particles/atomicPhysics2/CheckForInvalidTransitionType.hpp"
#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics2::enums;

    /** choose specific transition from previously selected transitionType for bound-bound transitions
     *
     * A transition is selected by rolling a random number r, [0,1) and comparing it to the cumulative sums of the
     *  normalized rates of the physical transitions of the transitionType.
     * The transition corresponding to the interval containing r is the chosen and accepted.
     *
     * @tparam T_Histogram type of the histogram
     * @tparam T_n_max number of levels of atomic states in input
     * @tparam T_TransitionDirection direction of transition, i.e. boundBoundUpward or boundBoundDownward?
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     */
    template<
        typename T_Histogram,
        uint8_t T_n_max,
        s_enums::TransitionDirection T_TransitionDirection,
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation>
    struct ChooseTransitionKernel_BoundBound
    {
        static constexpr s_enums::TransitionDataSet transitionDataSet = s_enums::TransitionDataSetFor<
            s_enums::TransitionType::boundBound, T_TransitionDirection>::dataSet;

        template<typename T_Ion>
        HDINLINE static void printAcceptedTransitionToConsole(T_Ion ion)
        {
            if constexpr(picongpu::atomicPhysics2::debug::kernel::chooseTransition::PRINT_DEBUG_TO_CONSOLE)
                printf(" transitionIndex %u\n", ion[transitionIndex_]);
        }

        /** call operator
         *
         * called by ChooseTransition atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactoryFloat factory for uniformly distributed random number generator, for float_X [0,1)
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super cells
         * @param localElectronHistogramDataBox deviceDataBox giving access to the local
         *  electron histograms of all local superCells
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         *  atomic states block of transitions
         * @param transitionDataBox deviceDataBox giving access to bound-bound transition data
         * @param localRateCacheBox deviceDataBox giving access the local rate cache of all local super cells
         * @param ionBox deviceDataBox giving access to the species particle frames of all local super cells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateBoundBoundNumberTransitionsDataBox,
            typename T_AtomicStateBoundBoundStartIndexBlockDataBox,
            typename T_BoundBoundTransitionDataBox,
            typename T_LocalTimeRemainingBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_LocalRateCacheBox,
            typename T_IonBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactoryFloat,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateBoundBoundNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateBoundBoundStartIndexBlockDataBox const startIndexBox,
            T_BoundBoundTransitionDataBox const transitionDataBox,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalElectronHistogramDataBox localElectronHistogramDataBox,
            T_LocalRateCacheBox localRateCacheBox,
            T_IonBox ionBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                number_transition_dataBox_not_bound_bound_based,
                u8(T_AtomicStateBoundBoundNumberTransitionsDataBox::processClassGroup)
                    == u8(s_enums::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                startIndex_dataBox_not_bound_bound_based,
                u8(T_AtomicStateBoundBoundStartIndexBlockDataBox::processClassGroup)
                    == u8(s_enums::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                transitiondataBox_not_bound_bound_based,
                u8(T_BoundBoundTransitionDataBox::processClassGroup)
                    == u8(s_enums::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                wrong_transition_ordering_for_T_transitionDirection,
                u8(T_BoundBoundTransitionDataBox::transitionOrdering)
                    == u8(s_enums::TransitionOrderingFor<T_TransitionDirection>::ordering));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or no particles
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto rngGeneratorFloat = rngFactoryFloat(worker, superCellFieldIdx);
            auto& rateCache = localRateCacheBox(superCellFieldIdx);
            T_Histogram& electronHistogram = localElectronHistogramDataBox(superCellFieldIdx);

            // check whether bound-bound transition and if yes,
            //      extract transition and roll random bin
            forEachLocalIonBoxEntry(
                [
                    &rngGeneratorFloat,
                    &atomicStateDataDataBox,
                    &numberTransitionsBox,
                    &startIndexBox,
                    &transitionDataBox,
                    &electronHistogram,
                    &rateCache
                ](T_Worker const& worker, auto& ion)
                {
                    // debug
                    checkForInvalidTransitionType(ion);

                    // reject already accepted macro-ions and other transitionTypes
                    bool const selectedBoundBoundT_TransitionDirectionTransition
                        = (ion[transitionIndex_] != u8(transitionDataSet));
                    if(ion[accepted_] || !selectedBoundBoundT_TransitionDirectionTransition)
                        return;

                    uint32_t const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    // get possible transitions' collectionIndices
                    constexpr bool isUpward = (u8(T_TransitionDirection) == u8(s_enums::TransitionDirection::upward));

                    uint32_t numberTransitions;
                    if constexpr(isUpward)
                        numberTransitions = numberTransitionsBox.numberOfTransitionsUp(atomicStateCollectionIndex);
                    else
                        numberTransitions = numberTransitionsBox.numberOfTransitionsDown(atomicStateCollectionIndex);

                    uint32_t startIndexTransitionBlock;
                    if constexpr(isUpward)
                        startIndexTransitionBlock = startIndexBox.startIndexBlockTransitionsUp(
                            atomicStateCollectionIndex);
                    else
                        startIndexTransitionBlock = startIndexBox.startIndexBlockTransitionsDown(
                            atomicStateCollectionIndex);

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::chooseTransition::PRINT_DEBUG_TO_CONSOLE)
                    {
                        printf(
                            "stateIndex %u transitionType %u startIndexTransitionBlock %u numberTransitionsDown %u",
                            atomicStateCollectionIndex,
                            ion[transitionIndex_],
                            startIndexTransitionBlock,
                            numberTransitions);
                    }

                    // get random number
                    float_X const r = rngGeneratorFloat();

                    // compare to cumulative sum of normalized transition rates to find choosen transition
                    // UNIT_LENGTH^3
                    constexpr float_X volumeScalingFactor
                        = pmacc::math::CT::volume<SuperCellSize>::type::value * picongpu::CELL_VOLUME;

                    float_X cumSum = 0._X;
                    for (uint32_t transitionID=0u; transitionID < numberTransitions; ++transitionID)
                    {
                        /// @todo cache transitionData, Brian Marre, 2023

                        // collisional de-/excitation
                        constexpr bool electronicChannelActive
                            = (T_electronicDeexcitation && !isUpward) || ((T_electronicExcitation && isUpward));
                        if constexpr(electronicChannelActive)
                        {
                            constexpr uint32_t numberBins = T_Histogram::numberBins;

                            // test for each bin separately
                            for(uint32_t binIndex = 0u; binIndex < numberBins; ++binIndex)
                            {
                                // eV
                                float_X const energy = electronHistogram.getBinEnergy(binIndex);
                                // eV
                                float_X const binWidth = electronHistogram.getBinWidth(binIndex);
                                // 1/(UNIT_LENGTH^3 * eV)
                                float_X const density = electronHistogram.getBinWeight0(binIndex) / volumeScalingFactor
                                    / binWidth;

                                // 1/UNIT_TIME
                                float_X const rateTransition = picongpu::particles::atomicPhysics2::rateCalculation::
                                        BoundBoundTransitionRates<T_n_max>::
                                            template rateCollisionalBoundBoundTransition<
                                                T_AtomicStateDataDataBox,
                                                T_BoundBoundTransitionDataBox,
                                                isUpward>(
                                    energy,
                                    binWidth,
                                    density,
                                    transitionID + startIndexTransitionBlock,
                                    atomicStateDataDataBox,
                                    transitionDataBox);

                                cumSum += rateTransition / rateCache.rate(
                                    u32(transitionDataSet),
                                    atomicStateCollectionIndex);

                                // inclusive limit, to make sure that r==1 is assigned a transition
                                if(r <= cumSum)
                                {
                                    // found chosen transition
                                    if constexpr(isUpward)
                                        ion[processClass_] = u8(picongpu::particles::atomicPhysics2::enums::
                                            ProcessClass::electronicExcitation);
                                    else
                                        ion[processClass_] = u8(picongpu::particles::atomicPhysics2::enums::
                                            ProcessClass::electronicDeexcitation);
                                    ion[transitionIndex_] = transitionID + startIndexTransitionBlock;
                                    ion[binIndex_] = binIndex;
                                    ion[accepted_] = true;

                                    // debug
                                    printAcceptedTransitionToConsole(ion);

                                    return;
                                }
                            }
                        }

                        // spontaneousDeexcitation
                        if constexpr(!isUpward && T_spontaneousDeexcitation)
                        {
                            // 1/UNIT_TIME
                            float_X const rateTransition = picongpu::particles::atomicPhysics2::rateCalculation::
                                BoundBoundTransitionRates<T_n_max>::template rateSpontaneousRadiativeDeexcitation<
                                    T_AtomicStateDataDataBox,
                                    T_BoundBoundTransitionDataBox>(
                                        transitionID + startIndexTransitionBlock,
                                        atomicStateDataDataBox,
                                        transitionDataBox);

                            cumSum += rateTransition / rateCache.rate(
                                u32(transitionDataSet),
                                atomicStateCollectionIndex);

                            // inclusive limit, to make sure that r==1 is assigned a transition
                            if(r <= cumSum)
                            {
                                // found chosen transition
                                ion[processClass_] = u8(picongpu::particles::atomicPhysics2::enums::ProcessClass::
                                    spontaneousDeexcitation);
                                ion[transitionIndex_] = transitionID + startIndexTransitionBlock;
                                // ion[binIndex_] not set, since no interaction with a bin happened
                                ion[accepted_] = true;

                                // debug
                                printAcceptedTransitionToConsole(ion);

                                return;
                            }
                        }
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
