/* Copyright 2022 Brian Marre
 * 
 * This file is part of PIConGPU.
 * 
 * PIConGPU is free software you can redistribute it andor modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file findStepWidth sub-stage of atomicPhysics
 *
 * implements calculation and caching of all no change rate matrix elements, using the
 *  local electron Histogram and the atomicData database as input
 */

# pragma once

#include "picongpu/particles/atomicPhysics2/StepWidthCalculation.kernel"


namespace picongpu::particles::atomicPhysics2
{
    template<typename T_IonSpecies>
    struct StepWidthCalculation
    {
        // might be alias, from here on out no more
        //! resolved type of alias T_IonSpecies
        using IonSpecies = pmacc::particles::meta::FindByNameOrType_t<VectorAllSpecies, T_IonSpecies>;

        using AtomicDataType = typename pmacc::traits::Resolve<
            GetFlagType<IonSpecies::FrameType, atomicDataType<>>::type>::type;

        //! call of kernel for every superCell
        HDINLINE void operator()(picongpu::MappingDesc const mappingDesc) const
        {
            // full local domain, no guards
            pmacc::AreaMapping<CORE + BORDER, MappingDesc> mapper(mappingDesc);
            pmacc::DataConnector& dc = pmacc::Environment<>::get().DataConnector();

            pmacc::lockstep::WorkerCfg workerCfg = pmacc::lockstep::makeWorkerCfg(MappingDesc::SuperCellSize{});

            // init pointer to localElectronHistogramField, AtomicData dataBase object and cacheDiagonalRates
            //      pointers to memory, we will only work on device, no sync required
            auto& localElectronHistogramField
                = *dc.get<electronDistribution::
                              LocalHistogramField<picongpu::atomicPhysics2::ElectronHistogram, picongpu::MappingDesc>>(
                    "Electron_localHistogramField",
                    true);
            AtomicDataType& atomicData = *dc.get<AtomicDataType>""
            auto&

            // macro for call of kernel, see pull request #4321
            PMACC_LOCKSTEP_KERNEL(BinElectrons(), workerCfg)
            (mapper.getGridDim())(
                mapper,
                electrons.getDeviceParticlesBox(),
                localElectronHistogramField.getDeviceDataBox()); // standard data box

        }

    };
} // namespace picongpu::particles::atomicPhysics2