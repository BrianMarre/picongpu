/* Copyright 2022 Brian Marre
 *
 * This file is part of PMacc.
 *
 * PMacc is free software: you can redistribute it and/or modify
 * it under the terms of either the GNU General Public License or
 * the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PMacc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License and the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the GNU Lesser General Public License along with PMacc.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <cstdint>

#include "picongpu/particles/atomicPhysics2/GetPhysicalEnergy.hpp"

// debug only
//#include "picongpu/particles/atomicPhysics2/DebugHelper.hpp"

namespace picongpu::particles::atomicPhysics2
{
    /** binning kernel
    *
    * @attention assumes that the histogram has been reset previously
    *
    * called by binElectrons sub-stage, resets the to the superCell corresponding
    * histogram and then bins all macro particles of the species T_ElectronSpecies
    * in the given superCell into the given histogram
    *
    * @tparam T_ElectronSpecies species of electron, must be actual type, not alias
    * @tparam T_Histogram type of histogram used per superCell
    */
    template<typename T_ElectronSpecies, typename T_Histogram>
    struct BinElectronsKernel
    {
        /** call operator
        *
        * @param acc accelerator object containing the device and block
        *  information, passed by PMACC_KERNEL call
        * @param areaMapper mapping of blockIndex to block superCell index
        * @param electronBox deviceDataBox containing the particle frames of the
        *  superCell
        * @param localElectronHistogramDataBox deviceDataBox containing the
        *  electron histograms of the local superCell
        */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_ElectronBox,
            typename T_localElectronHistogramDataBox>
        HDINLINE void operator() (
            T_Worker const& worker,
            T_AreaMapping areaMapping,
            T_ElectronBox const electronBox,
            T_localElectronHistogramDataBox localElectronHistogramDataBox
            ) const
        {
            // by definition our frameSize is always equal to the superCellSize
            constexpr uint32_t frameSize = pmacc::math::CT::volume<SuperCellSize>::type::value;

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            // get histogram for current superCell
            T_Histogram& histogram = localElectronHistogramDataBox(superCellIdx);

            auto forEachElectronBoxEntry
                = pmacc::particles::algorithm::acc::makeForEach(worker, electronBox, superCellIdx);

            // end kernel if no particles
            if(not forEachElectronBoxEntry.hasParticles())
                return;

            // bin electrons
            forEachElectronBoxEntry(
                [&histogram](T_Worker const& worker, auto& particle)
                {
                    float_X const energy = GetPhysicalEnergy::KineticEnergy(particle);
                    // unit: eV

                    histogram.binParticle(
                        worker,
                        energy, // unit: eV
                        particle[weighting_]); // unitless
                });

            worker.sync();

            // debug only
            //debug::printHistogramToConsole(histogram);
        }
    };
} // namespace picongpu::particles::atomicPhysics2
