/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file implements calculation of ionization potential depression(IPD) input variables from sum fields
 *
 * @attention assumes that fillSumFieldKernel has been completed for all IPD ion and electron species previously!
 */

namespace picongpu::particles::atomicPhysics2::ionizationPotentialDepression
{
    /** calculate IPD input kernel
     *
     * @attention assumes that the sumFields have been reset previously
     *
     * called by IPD calculation stage, calculates local superCell temperature, debye length and
     */
    struct CalculateIPDInput
    {
        /** call operator
         *
         * called by calculateIPD atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param localTimeRemainingBox deviceDataBox containing local atomicPhysics step
         *  time remaining for every superCell
         * @param localSumWeightFieldBox deviceDataBox giving access to the sum of weights of macro particles for all
         *  local superCells
         * @param localSumTemperatureFunctionalFieldBox deviceDataBox giving access to the sum of the temperature
         *  functional of all macro particles for all local superCells
         * @param localSumElectronWeightFieldBox deviceDataBox giving access to the sum of weights for electron macro
         *  particles for all local superCells
         * @param localTemperatureBox deviceDataBox giving access to the local temperature for every superCell
         * @param localZStarBox deviceDataBox giving access to the local Z^Star value for every superCell
         * @param localDebyeLengthBox deviceDataBox giving access to the local debye length for every superCell
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingDataBox,
            typename T_SumWeightAllFieldDataBox,
            typename T_SumTemperatureFunctionalFieldDataBox,
            typename T_SumWeightElectronFieldBox,
            typename T_SumChargeNumberIonsFieldDataBox,
            typename T_SumChargeNumberSquaredIonsFieldDataBox typename T_LocalTemperatureFieldDataBox,
            typename T_LocalZStarFieldDataBox,
            typename T_LocaDebyeLengthFieldDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingDataBox const localTimeRemainingBox,
            T_SumWeightAllFieldDataBox const localSumWeightAllFieldBox,
            T_SumTemperatureFunctionalFieldDataBox const localSumTemperatureFunctionalFieldBox,
            T_SumWeightElectronFieldBox const localSumElectronWeightFieldBox,
            T_SumChargeNumberIonsFieldDataBox const localSumChargeNumberFieldBox,
            T_SumChargeNumberSquaredIonsFieldDataBox const localSumChargeNumberSquaredFieldBox,
            T_LocalTemperatureFieldDataBox localTemperatureEnergyFieldBox,
            T_LocalZStarFieldDataBox localZStarFieldBox,
            T_LocaDebyeLengthFieldDataBox localDebyeLengthFieldBox) const
        {
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc())))
                - areaMapping.getGuardingSuperCells();

            // UNIT_TIME
            float_X const timeRemaining = localTimeRemainingBox(superCellFieldIdx);

            // end kernel if superCell already finished
            if(timeRemaining <= 0._X)
                return;

            // localSumFieldValues
            //{
            // UNIT_MASS * UNIT_LENGTH / UNIT_TIME * weight / TYPICAL_PARTICLES_PER_MACROPARTICLE
            float_X const localSumTemperatureFunctional = localSumTemperatureFunctionalFieldBox(superCellFieldIdx);
            // weight / TYPICAL_PARTICLES_PER_MACROPARTICLE
            float_X const localSumWeightAll = localSumWeightAllFieldBox(superCellFieldIdx);
            // weight / TYPICAL_PARTICLES_PER_MACROPARTICLE
            float_X const localSumWeightElectron = localSumElectronWeightFieldBox(superCellFieldIdx);

            // unitless * weight / TYPICAL_PARTICLES_PER_MACROPARTICLE
            float_X const localSumChargeNumber = localSumChargeNumberFieldBox(superCellFieldIdx);
            // unitless * weight / TYPICAL_PARTICLES_PER_MACROPARTICLE
            float_X const localSumChargeNumberSquared = localSumChargeNumberSquaredFieldBox(superCellFieldIdx);
            //}

            // IPD input parameter
            //{
            // UNIT_MASS * UNIT_LENGTH^2 / UNIT_TIME^2 * weight / TYPICAL_PARTICLES_PER_MACROPARTICLE
            float_X& localTemperatureTimesk_Boltzman = localTemperatureEnergyFieldBox(superCellFieldIdx);
            // unitless, non weighted
            float_X& localZStar = localZStarFieldBox(superCellFieldIdx);
            // UNIT_LENGTH, non weighted
            float_X& localDebyeLength = localDebyeLengthFieldBox(superCellFieldIdx);
            //}

            const auto onlyMaster = lockstep::makeMaster(worker);

            /// @todo use forEachSuperCell instead of letting workers wait, Brian Marre, 2024
            onlyMaster(
                [&localSumTemperatureFunctional,
                 &localSumWeightAll,
                 &localSumWeightElectron,
                 &localSumChargeNumber,
                 &localSumChargeNumberSquared,
                 &localTemperatureTimesk_Boltzman,
                 &localZStar,
                 &localDebyeLength]()
                {
                    // (unitless * weight / TYPICAL_PARTICLES_PER_MACROPARTICLE)
                    //  / (unitless * weight / TYPICAL_PARTICLES_PER_MACROPARTICLE)
                    // unitless
                    localZStar = localSumChargeNumberSquared / localSumChargeNumber;

                    // UNIT_MASS * UNIT_LENGTH^2 / UNIT_TIME^2 * weight / TYPICAL_PARTICLES_PER_MACROPARTICLE
                    //  / (weight / TYPICAL_PARTICLES_PER_MACROPARTICLE)
                    // UNIT_MASS * UNIT_LENGTH^2 / UNIT_TIME^2
                    localTemperatureTimesk_Boltzman = localSumTemperatureFunctional / localSumWeightAll;

                    //! @note in case simDim = DIM2, we assumes CELL_VOLUME = CELL_WIDTH * CELL_DEPTH * (system size)
                    // (UNIT_CHARGE^2 / (UNIT_ENERGY * UNIT_LENGTH)) * UNIT_LENGTH^3 / UNIT_CHARGE^2
                    // UNIT_LENGTH^2 / UNIT_ENERGY
                    constexpr float_X constFactorDebyeLength
                        = picongpu::EPS0 * picongpu::CELL_VOLUME / pmacc::math::cPow(picongpu::ELECTRON_CHARGE, 2u);

                    // sqrt(UNIT_LENGTH^2 / UNIT_ENERGY * UNIT_ENERGY) = UNIT_LENGTH
                    localDebyeLength = math::sqrt(
                        scaleFactorDebyeLength * localTemperatureTimesk_Boltzman
                        / (localSumChargeNumberSquared + localSumWeightElectron));
                });
        }
    }
} // namespace picongpu::particles::atomicPhysics2::ionizationPotentialDepression
