/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file implements calculation of ionization potential depression(IPD) input variables from sum fields
 *
 * @attention assumes that fillSumFieldKernel has been completed for all IPD ion and electron species previously!
 */

namespace picongpu::particles::atomicPhysics2::ionizationPotentialDepression
{
    /** calculate IPD input kernel
     *
     * @attention assumes that the sumFields have been reset previously
     *
     * called by IPD calculation stage, calcualtates local superCell temperature, debye length and
     */
    struct CalculateIPDInput
    {
        /** call operator
         *
         * called by calculateIPD atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param localTimeRemainingBox deviceDataBox containing local atomicPhysics step
         *  time remaining for every superCell
         * @param localTimeStepBox deviceDataBox containing local atomicPhysics time step
         *  length for every superCell
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_LocalTimeStepBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox localTimeRemainingBox,
            T_LocalTimeStepBox const localTimeStepBox) const auto onlyMaster = lockstep::makeMaster(worker);

        /// @todo use forEachSuperCell instead of letting workers wait, Brian Marre, 2023
        onlyMaster([&timeStep, &timeRemaining]() { timeRemaining = timeRemaining - timeStep; });
    }
} // namespace picongpu::particles::atomicPhysics2::ionizationPotentialDepression
