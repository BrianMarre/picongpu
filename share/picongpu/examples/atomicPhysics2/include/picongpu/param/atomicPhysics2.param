/* Copyright 2019-2022 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * configuration file for atomicPhysics, see speciesDefinition.param for
 * actual modeling of atomic Physics of ions.
 */

#pragma once

#include <pmacc/identifier/value_identifier.hpp>

#include <string>

#include <picongpu/particles/atomicPhysics2/stateRepresentation/ConfigNumber.hpp>
#include <picongpu/particles/atomicPhysics2/electronDistribution/LogSpaceHistogram.hpp>

namespace picongpu
{
    namespace atomicPhysics2
    {

        using ElectronHistogram = particles::atomicPhysics2::electronDistribution::LogSpaceHistogram<uint32_t, 100u, static_cast<uint32_t>(float_X(1e7))>;

        // debug compile settings
        //! activate more performance relevant debug checks
        constexpr bool ATOMIC_PHYSICS_HOT_DEBUG = true;
        //! activate less performance relevant debug checks
        constexpr bool ATOMIC_PHYSICS_COLD_DEBUG = true;

        /// @todo remove
        // datatype to be used for configNumber storage
        using configNumberDataType = uint64_t;
        constexpr uint8_t protonNumber = 18u;
        constexpr uint8_t numLevels = 10u;


    } // namespace atomicPhysics2

    /** atomicConfigNumber
     *
     * atomic state of ions, description by index number, corresponding to a super
     *  configurations.
     *
     * Must be defined for each ion species seperatly by giving the number of modelled
     * atomic levels N, the proton number Z and the datatype to be used,
     * eg. float_x, uint32_t, ..., for storage of index.
     *
     * -> more efficient representation of atomicLevels
     *
     * BEWARE: index variable must cover the number of states possible,
     * See particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp for further
     * information
     */

    /// @todo move to species definition
    /* definition of a configNumber type as an example,
     * other ion speceis can be added similarly as a new value identifier
     *
     * actual datatype must be defined separately from value_identifier,
     * since all "," are interpreted as separating macro arguments
     */
    using ConfigNumber_Ar = particles::atomicPhysics2::stateRepresentation::ConfigNumber<
        picongpu::atomicPhysics2::configNumberDataType,
        picongpu::atomicPhysics2::numLevels,
        picongpu::atomicPhysics2::protonNumber>;
    value_identifier(ConfigNumber_Ar, configNumber_Argon, ConfigNumber_Ar(1u));

} // namespace picongpu
