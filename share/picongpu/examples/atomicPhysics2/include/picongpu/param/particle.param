/* Copyright 2013-2020 Axel Huebl, Rene Widera, Marco Garten, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/atomicPhysics/SetToAtomicGroundStateForChargeState.hpp"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/startPosition/functors.def"

#include <pmacc/math/Vector.hpp>
#include <pmacc/math/operation.hpp>


// particles randomly distributed, 10 macro particle per cell, 200keV initial drift
namespace picongpu
{
    namespace particles
    {
        /** a particle with a weighting below MIN_WEIGHTING will not
         *      be created / will be deleted
         *  unit: none
         */
        constexpr float_X MIN_WEIGHTING = 1.0;

        namespace startPosition
        {
            struct RandomParameter10ppc
            {
                /** Count of particles per cell at initial state
                 *  unit: none
                 */
                static constexpr uint32_t numParticlesPerCell = 10u;
            };

            // sit directly in lower corner of the cell
            CONST_VECTOR(
                float_X,
                3,
                InCellOffset,
                // each x, y, z in-cell position component in range [0.0, 1.0)
                0.0,
                0.0,
                0.0);
            struct OnePositionParameter
            {
                /** Count of particles per cell at initial state
                 *  unit: none
                 */
                static constexpr uint32_t numParticlesPerCell = 1u;

                const InCellOffset_t inCellOffset;
            };
            using OnePosition = OnePositionImpl<OnePositionParameter>;
            using Random10ppc = RandomImpl<RandomParameter10ppc>;

        } // namespace startPosition

        /** During unit normalization, we assume this is a typical
         *  number of particles per cell for normalization of weighted
         *  particle attributes.
         */
        constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = startPosition::RandomParameter10ppc::numParticlesPerCell;

        namespace manipulators
        {
            struct SetIonTo16Ionized
            {
                /** set ions to targetChargeState times ionized and atomic ground state for
                 *  that charge state.
                 */
                template<typename T_Particle>
                DINLINE void operator()(T_Particle& particle)
                {
                    constexpr float_X targetChargeState = 16;

                    // number of Electrons for neutral atom
                    constexpr float_X numberBoundElectrons
                        = picongpu::traits::GetAtomicNumbers<T_Particle>::type::numberOfProtons;

                    PMACC_ASSERT_MSG(
                        numberBoundElectrons >= targetChargeState,
                        "too few protons for target charge state");

                    picongpu::particles::atomicPhysics::SetToAtomicGroundStateForChargeState{}(
                        particle,
                        numberBoundElectrons - targetChargeState);
                }
            };

            // define a drift in X equal to 200 keV for electrons
            CONST_VECTOR(float_X, 3, DriftParam_direction, 1.0, 0.0, 0.0);
            struct Drift200keVParam
            {
                static constexpr float_64 gamma = 1.39139;
                const DriftParam_direction_t direction;
            };
            using Assign200keVDrift = unary::Drift<Drift200keVParam, pmacc::math::operation::Assign>;

            struct TemperatureParam
            {
                /** Initial temperature
                 *  unit: keV
                 */
                static constexpr float_64 temperature = 1.;
            };
            using AddTemperature = unary::Temperature<TemperatureParam>;


            // definition of set initial ionization
            using SetIonization = generic::Free<SetIonTo16Ionized>;

        } // namespace manipulators
    } // namespace particles
} // namespace picongpu
