/* Copyright 2019-2020 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * configuration file for atomicPhysics, see speciesDefinition.param for
 * actual modelling of atomic Physics of ions.
 */

#pragma once

#include <picongpu/particles/atomicPhysics/stateRepresentation/LevelVector.hpp>
//include <picongpu/particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp>

#include <string>

namespace picongpu
{
    namespace atomicPhysics
    {
        // datatype/coding used in representation atomic state
        template<uint8_t T_NumberStates>
        using LevelVector = particles::atomicPhysics::stateRepresentation::LevelVector<float_X, T_NumberStates>;

        // pathes of file containing atomic input data, see documentation for creation, only one different ion possible for now
        // state data
        // ArgonLevels.txt
        const std::string stateDataFileName = "/home/<username>/CarbonLevels.txt";
        // transition data
        // ArgonTransitions.txt
        const std::string transitionDataFileName = "/home/<username>/CarbonTransitions.txt";

        // datatype to be used for configNUmber storage
        using configNumberDataType = uint64_t;
        constexpr uint8_t protonNumber = 18u;
        constexpr uint8_t numLevels = 10u;

        // dirty hack, should be specifiable per species independently
        // for now 1: free electron interaction, 2: +photonic spontanous deexcitation
        constexpr uint8_t numProcesses = 2u;

        // histogram parameter
        constexpr float_X initialGridWidth = 1._X; // unit: ATOMIC_UNIT_ENERGY
        constexpr float_X relativeErrorTarget = 0.5_X; // unit: 1/s /(1/( m^3 * ATOMIC_UNIT_ENERGY ))
        constexpr uint16_t maxNumBins = 80;

    } // namespace atomicPhysics
} // namespace picongpu
