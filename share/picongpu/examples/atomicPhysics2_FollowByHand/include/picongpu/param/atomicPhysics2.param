/* Copyright 2019-2022 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * configuration file for atomicPhysics, also see speciesDefinition.param for further
 *  necessary settings to enable atomicPhysics.
 */

#pragma once

#include "picongpu/particles/atomicPhysics2/ExponentialApproximationProbability.hpp"
#include "picongpu/particles/atomicPhysics2/LinearApproximationProbability.hpp"
#include "picongpu/particles/atomicPhysics2/atomicData/AtomicData.hpp"
#include "picongpu/particles/atomicPhysics2/electronDistribution/LogSpaceHistogram.hpp"
#include "picongpu/particles/atomicPhysics2/stateRepresentation/ConfigNumber.hpp"

#include <pmacc/identifier/value_identifier.hpp>

#include <string>


namespace picongpu::atomicPhysics2
{
    using ElectronHistogram = particles::atomicPhysics2::electronDistribution::LogSpaceHistogram<
        uint32_t, // T_Storage, magic ;)
        5u, // T_numberBins
        static_cast<uint32_t>(float_X(1e6)) // T_maxEnergy[eV], stored as T_Storage
        >;

    // NOTE: both the following must be the same for all ion-species!, otherwise shared histogram not well defined
    constexpr float_X timeStepAlpha = 0.3_X;
    // factor between numerical limit for atomicPhysics time step and chosen step length
    using ProbabilityApproximationFunctor = picongpu::particles::atomicPhysics2::ExponentialApproximationProbability;
    // which probability approximation to use for the acceptance step

    /// @todo move to species definition?, Brian Marre, 2022
    // Argon Definition basics
    using configNumberStorageDataType_H = uint64_t;
    constexpr uint8_t protonNumber_H = 1u;
    constexpr uint8_t numLevels_H = 10u;

    /** atomicConfigNumber definition for species argon
     *
     * data type for ion atomic state storage of one species,
     *  actually object holding an analytic index corresponding to a super configuration.
     *
     * Must be defined for each ion species separately by giving the number of modeled
     * atomic levels N, the proton number Z and the data type to be used,
     *  eg. float_x, uint32_t, ..., for storage of index.
     *
     * See particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp for further
     * information.
     *
     * @attention index variable must cover the number of states possible,
     * @attention actual data type must be defined separately from value_identifier,
     *  since all "," are interpreted as separating macro arguments
     */
    using ConfigNumber_Hydrogen = particles::atomicPhysics2::stateRepresentation::
        ConfigNumber<configNumberStorageDataType_H, numLevels_H, protonNumber_H>;

    // datatype to be used for configNumber storage
    value_identifier(ConfigNumber_Hydrogen, ConfigNumber_H, ConfigNumber_Hydrogen(1u));

    // atomicData dataBase type
    using AtomicData_H = particles::atomicPhysics2::atomicData::AtomicData<
        uint32_t, // T_Number
        float_X, // T_Value
        uint32_t, // T_CollectionIndex
        ConfigNumber_Hydrogen, // T_ConfigNumber, data type used for storage
        true, // T_electronicExcitation
        true, // T_electronicDeexcitation
        true, // T_spontaneousDeexcitation
        true, // T_electronicIonization
        true, // T_autonomousIonization
        false>; // T_fieldIonization

} // namespace picongpu::atomicPhysics2
