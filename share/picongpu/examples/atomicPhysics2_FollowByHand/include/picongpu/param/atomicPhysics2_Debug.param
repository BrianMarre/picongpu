/* Copyright 2022-2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * configurations for compile time debug options of atomicPhysics
 *
 *
 * needs to be a separate file to avoid circular imports in
 *  "picongpu/particles/atomicPhysics2/atomicData/"
 */

#pragma once

namespace picongpu::atomicPhysics2::debug
{
    namespace atomicData
    {
        constexpr bool PRINT_TO_CONSOLE = false;
        //! @attention performance relevant, uncaught error will lead to invalid memory access
        constexpr bool RANGE_CHECKS_IN_DATA_QUERIES = true;
        //! range check in store calls to individual data boxes, only once upon initial loading of atomic input data
        constexpr bool RANGE_CHECKS_IN_DATA_LOAD = true;
        //! @attention will not catch members missing from hostToDevice() method,
        constexpr bool DEBUG_SYNC_BUFFERS_TO_HOST = false;
    } // namespace  atomicData


    namespace electronHistogram
    {
        //! @attention performance relevant, uncaught error will lead to invalid memory access
        constexpr bool RANGE_CHECKS_BIN_INDEX = true;
        //! @attention performance relevant, uncaught error will lead to invalid memory access
        constexpr bool RANGE_CHECKS_ENERGY = true;
        //! @attention only useful if building serial and cpu-only
        constexpr bool PRINT_TO_CONSOLE = false;
    } // namespace electronHistogram


    namespace rateCalculation
    {
        //! @attention performance relevant
        constexpr bool DEBUG_CHECKS = true;
        constexpr bool RUN_UNIT_TESTS = true;
    } // namespace rateCalculation


    namespace deltaEnergyTransition
    {
        //! @attention performance relevant
        constexpr bool IONIZATION_ENERGY_INVERSION_CHECK = true;
    } // namespace deltaEnergyTransition


    namespace rateCache
    {
        //! range checks in rate cache, @attention performance relevant
        constexpr bool COLLECTION_INDEX_RANGE_CHECKS = true;

        //! @attention only useful if building serial and cpu-only
        constexpr bool PRINT_TO_CONSOLE = false;
    } // namespace rateCache


    namespace rejectionProbabilityCache
    {
        //! @attention performance relevant
        constexpr bool BIN_INDEX_RANGE_CHECK = true;
    } // namespace rejectionProbabilityCache


    namespace initIonizationElectrons
    {
        //! @attention performance relevant
        constexpr bool CHECK_DELTA_ENERGY_INIT_FROM_COMOVING_POSITIVE = true;
    } // namespace initIonizationElectrons

    namespace scFlyComparison
    {
        /** @attention resamples electron momentum every atomicPhysics steps creating unphysical currents,
         *  **do not use outside debug!**
         */
        constexpr bool FORCE_CONSTANT_ELECTRON_TEMPERATURE = false;

        //! fixed temperature setting
        struct TemperatureParam
        {
            //! Initial temperature, [keV]
            static constexpr float_64 temperature = 1.;
        };
    } // namespace scFlyComparison

    namespace kernel::calculateTimeStep
    {
        //! @attention performance relevant
        constexpr bool CHECK_ALL_RATE_CACHE_ENTRIES_NEGATIVE = true;
    } // namespace kernel::calculateTimeStep

    namespace kernel::extractTransition
    {
        //! @attention performance relevant
        constexpr bool CHECK_FOR_INVALID_PROCESS_ID = true;
        //! @attention only viable serial and cpu only compile
        constexpr bool PRINT_DEBUG_TO_CONSOLE = false;
    } // namespace kernel::extractTransition

    namespace kernel::acceptanceTest
    {
        //! @attention only viable serial and cpu only compile
        constexpr bool PRINT_ACCEPTANCE_PROBABILITY_TO_CONSOLE = true;

        //! @attention performance relevant
        constexpr bool CHECK_RATE_LIMIT = true;

        //! @attention only viable serial and cpu only compile
        constexpr bool DUMP_ION_DATA_TO_CONSOLE_ALL_ACCEPTED = true;
        //! @attention only viable serial and cpu only compile
        constexpr bool DUMP_ION_DATA_TO_CONSOLE_EACH_TRY = true;
    } // namespace kernel::acceptanceTest

    namespace kernel::spawnIonizationElectrons
    {
        //! @attention performance relevant
        constexpr bool ELECTRON_PARTICLE_BOX_FILL_GAPS = false;
    } // namespace kernel::spawnIonizationElectrons
} // namespace picongpu::atomicPhysics2::debug
